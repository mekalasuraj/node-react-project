{"version":3,"sources":["components/students/textfield.js","components/students/login.js"],"names":["TextField","label","props","useField","field","meta","className","htmlFor","name","touched","error","autoComplete","component","Login","useState","email","password","setFormData","showError","setError","validate","Yup","required","min","initialValues","validationSchema","onSubmit","values","console","log","formData","axios","post","then","response","data","message","decoded","jwt_decode","token","sessionStorage","setItem","JSON","stringify","window","location","href","formik","type","style","textDecoration"],"mappings":"gNAkBeA,EAfU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAChD,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,sBAAKC,UAAU,OAAf,UACE,uBAAOC,QAASH,EAAMI,KAAtB,SAA6BP,IAC7B,2DACEK,UAAS,mCAA8BD,EAAKI,SAAWJ,EAAKK,OAAS,eACjEN,GAAWF,GAFjB,IAGES,aAAa,SAEf,cAAC,IAAD,CAAcC,UAAU,MAAMJ,KAAMJ,EAAMI,KAAMF,UAAU,cCyHjDO,UA/HD,SAACX,GACX,MAAgCY,mBAAS,CACrCC,MAAO,GACPC,SAAU,KAFd,mBAAiBC,GAAjB,WAIE,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAkBC,EAAlB,KA6BMC,EAAWC,IAAW,CAE1BN,MAAOM,MACJN,MAAM,oBACNO,SAAS,qBACZN,SAAUK,MACPE,IAAI,EAAG,yCACPD,SAAS,0BAGlB,OACE,mCAEC,qBAAKhB,UAAU,SAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,UACf,sBAAKA,UAAU,QAAf,UACI,oBAAIA,UAAU,wBAAd,mBAsBjB,cAAC,IAAD,CACMkB,cAAe,CACbT,MAAO,GACPC,SAAU,IAEZS,iBAAkBL,EAClBM,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACZ,IAAIG,EAAU,CAACf,MAAMY,EAAOZ,MAAMC,SAASW,EAAOX,UAClDe,IAAMC,KAAK,0BAA0BF,GACrCG,MAAK,SAAAC,GACF,GAA6B,iBAA1BA,EAASC,KAAKC,QAA2B,CAC3C,IAAIC,EAAUC,YAAWJ,EAASC,KAAKI,OACvCX,QAAQC,IAAIQ,GACTpB,EAAY,CAACF,MAAO,GAAGC,SAAU,KACjCwB,eAAeC,QAAQ,OAAOC,KAAKC,UAAUN,IAC7CG,eAAeC,QAAQ,QAAQP,EAASC,KAAKI,OAC7CK,OAAOC,SAASC,KAAK,iBACW,eAA1BZ,EAASC,KAAKC,SACvBjB,GAAS,OAnBrB,SAwBO,SAAA4B,GAAM,OACL,gCACE,oBAAIzC,UAAU,mCAAd,qBAEWY,GACC,qBAAKZ,UAAU,eAAf,iCAEZ,eAAC,IAAD,WACA,cAAC,EAAD,CAAWL,MAAM,QAAQO,KAAK,QAAQwC,KAAK,UACzC,cAAC,EAAD,CAAW/C,MAAM,WAAWO,KAAK,WAAWwC,KAAK,aACjD,wBAAQ1C,UAAU,iCAAiC0C,KAAK,SAAxD,sBAGF,mBAAGF,KAAK,YAAYxC,UAAU,OAAO2C,MAAO,CAACC,eAAe,aAA5D,+BAKG,qBAAK5C,UAAU","file":"static/js/9.442571df.chunk.js","sourcesContent":["import React from 'react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <div className=\"mb-2\">\n      <label htmlFor={field.name}>{label}</label>\n      <input\n        className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid'}`}\n        {...field} {...props}\n        autoComplete=\"off\"\n      />\n      <ErrorMessage component=\"div\" name={field.name} className=\"error\" />\n    </div>\n  )\n}\n\nexport default TextField;","import React, {useEffect,useState} from 'react';\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { Formik, Form ,ErrorMessage, useField} from 'formik';\nimport * as Yup from 'yup';\nimport TextField from './textfield';\n\nconst Login = (props) => {\n    const [formData, setFormData] = useState({\n        email: '',\n        password: ''\n      });\n      const [showError, setError] = useState(false);\n\n      \n    const onSTudentsDetailsCahnge=(e)=>{\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    }\n\n    const onLoginFormSubmit = (e) => {\n        e.preventDefault();\n    \n       axios.post('/api/users/auth/student',formData)\n       .then(response=>{\n        \n        \n\n         \n           if(response.data.message === \"record_found\"){\n            var decoded = jwt_decode(response.data.token);\n            console.log(decoded);    \n               setFormData({email: '',password: ''});\n               sessionStorage.setItem('user',JSON.stringify(decoded))\n               sessionStorage.setItem('token',response.data.token)\n               window.location.href='/dashboard';\n           } else if(response.data.message === \"No_Matches\"){\n            setError(true);\n           }\n       })\n      };\n\n      const validate = Yup.object({\n       \n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(5, 'Password must be at least 5 charaters')\n          .required('Password is required')\n      })\n\n  return (\n    <>\n     \n     <div className=\"col-12\">\n         <div className=\"row\">\n             <div className=\"col-4\"></div>\n             <div className=\"col-4\">\n                 <h3 className=\"text-center mt-5 mb-5\">Login</h3>\n                 {/* {\n                     showError &&\n                     (<div className=\"err_msg mb-4\">Invalid Credentials</div>)\n                 }\n                 \n             <form onSubmit={onLoginFormSubmit}> \n                    <div className=\"form-outline\">\n                    <label className=\"form-label\" htmlFor=\"typeEmail\">Email</label>\n                        <input type=\"email\" id=\"typeEmail\" name=\"email\" value={formData.email} onChange={onSTudentsDetailsCahnge} className=\"form-control\" required/>\n                        \n                    </div>\n\n                    <div className=\"form-outline mb-4\">\n                    <label className=\"form-label\" htmlFor=\"typePassword\">Password</label>\n                        <input type=\"password\" pattern=\".{5,}\" title=\"5 characters minimum\" id=\"typePassword\" name=\"password\" value={formData.password} onChange={onSTudentsDetailsCahnge} className=\"form-control\" required/>\n                    </div>\n            \n                <button type=\"submit\" className=\"btn btn-primary btn-block mb-3\">Sign In</button>\n            </form>\n                <a href='/register' className=\"mt-3\" style={{textDecoration:'underline'}}>Register</a> */}\n\n<Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={validate}\n      onSubmit={values => {\n        console.log(values)\n        let formData ={email:values.email,password:values.password};\n        axios.post('/api/users/auth/student',formData)\n       .then(response=>{\n           if(response.data.message === \"record_found\"){\n            var decoded = jwt_decode(response.data.token);\n            console.log(decoded);    \n               setFormData({email: '',password: ''});\n               sessionStorage.setItem('user',JSON.stringify(decoded))\n               sessionStorage.setItem('token',response.data.token)\n               window.location.href='/dashboard';\n           } else if(response.data.message === \"No_Matches\"){\n            setError(true);\n           }\n       })\n      }}\n    >\n      {formik => (\n        <div>\n          <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\n          {\n                     showError &&\n                     (<div className=\"err_msg mb-4\">Invalid Credentials</div>)\n                 }\n          <Form>\n          <TextField label=\"Email\" name=\"email\" type=\"email\" />\n            <TextField label=\"password\" name=\"password\" type=\"password\" />\n            <button className=\"btn btn-primary btn-block mb-3\" type=\"submit\">Login</button>\n            \n          </Form>\n          <a href='/register' className=\"mt-3\" style={{textDecoration:'underline'}}>Register</a> \n        </div>\n      )}\n    </Formik>\n             </div>\n             <div className=\"col-4\"></div>\n         </div>\n     \n    \n     </div>\n     \n    </>\n  );\n};\n\n\n\nexport default Login;\n\n"],"sourceRoot":""}